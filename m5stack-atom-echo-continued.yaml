substitutions:
  name: m5stack-atom-echo-concon
  friendly_name: M5Stack Atom Echo
#  micro_wake_word_model: okay_nabu  # okay_nabu, alexa, hey_jarvis, hey_mycroft are supported

esphome:
  name: ${name}
  name_add_mac_suffix: true
  friendly_name: ${friendly_name}
  min_version: 2024.9.0

esp32:
  board: m5stack-atom
  framework:
    type: esp-idf
    
# Enable logging
logger:

wifi:
  ssid: !secret wifi_ssid
  password: !secret wifi_password

# Enable Home Assistant API
api:
  encryption:
    key: !secret atom_encryption_key

# Define a global state variable using a string
globals:
  - id: state
    type: std::string
    restore_value: yes
    initial_value: "idle"  # Start in "idle" state
  
i2s_audio:
  - id: i2s_audio_bus
    i2s_lrclk_pin: GPIO33
    i2s_bclk_pin: GPIO19

microphone:
  - platform: i2s_audio
    id: echo_microphone
    i2s_din_pin: GPIO23
    adc_type: external
    pdm: true

speaker:
  - platform: i2s_audio
    id: echo_speaker
    i2s_dout_pin: GPIO22
    dac_type: external
    channel: mono

light:
  - platform: esp32_rmt_led_strip
    id: led
    name: LED
    disabled_by_default: true
    entity_category: config
    pin: GPIO27
    default_transition_length: 0s
    chipset: SK6812
    num_leds: 1
    rgb_order: grb
    rmt_channel: 0
    effects:
      - pulse:
          name: "Slow Pulse"
          transition_length: 250ms
          update_interval: 250ms
          min_brightness: 50%
          max_brightness: 100%
      - pulse:
          name: "Fast Pulse"
          transition_length: 100ms
          update_interval: 100ms
          min_brightness: 50%
          max_brightness: 100%
    
voice_assistant:
  id: va
  microphone: echo_microphone
  speaker: echo_speaker
  noise_suppression_level: 2
  auto_gain: 31dBFS
  volume_multiplier: 2.0
  vad_threshold: 3
  on_client_connected:
    - delay: 2s  # Give the api server time to settle
    - select.set:
        id: state_machine
        option: "idle"
  on_listening:
    select.set:
      id: state_machine
      option: "listening"
  on_stt_vad_end:
    select.set:
      id: state_machine
      option: "thinking"
  on_tts_stream_start:
    select.set:
      id: state_machine
      option: "responding"
  on_tts_stream_end:
    - if:
        condition:
          switch.is_on: continued_conversation
        then:
          select.set:
            id: state_machine
            option: "listening"
        else:
          select.set:
            id: state_machine
            option: "idle"
  on_end:
    - if:
        condition:
          - switch.is_off: continued_conversation
        then:
          - select.set:
              id: state_machine
              option: "idle"
  on_error:
    select.set:
      id: state_machine
      option: "error" 
  on_client_disconnected:
    - lambda: id(va).set_use_wake_word(false);
    - voice_assistant.stop:
    
# micro_wake_word:
#  model: ${micro_wake_word_model}
#  on_wake_word_detected:
#    select.set:
#      id: state_machine
#      option: "listening"

# Display the current state as a text sensor
text_sensor:
  - platform: template
    name: "Current State"
    id: current_state
    # Show the current state as a text string
#    lambda: return id(current_state).state.c_str();

# State machine using the Select component
select:
  - platform: template
    name: "State Machine"
    id: state_machine
    optimistic: true
    internal: true
    options:
      - "idle"
      - "listening"
      - "thinking"
      - "responding"
      - "error"
    initial_option: "idle"
    on_value:
      then:
        # Synchronize the global state with the select component
        - text_sensor.template.publish:
            id: current_state
            state: !lambda "return id(state_machine).state;"

        - if:
            condition:
              # Check if the current state is "idle"
              - lambda: 'return id(state_machine).state == "idle";'
            then:
              - logger.log: "Executing IDLE actions..."
              - wait_until:
                  condition:
                    - not:
                        voice_assistant.is_running
                  timeout: 5s       
              - lambda: "id(va).set_use_wake_word(true);"
              - voice_assistant.start_continuous:

        - if:
            condition:
              # Check if the current state is "listening"
              text_sensor.state:
                id: current_state
                state: "listening"
            then:
              - logger.log: "Listening for input..."
              - light.turn_on:
                  id: led
                  blue: 100%
                  red: 0%
                  green: 0%
                  effect: "Slow Pulse"
              - if:
                  condition:
                    - switch.is_on: continued_conversation
                  then:
                    - lambda: "id(va).set_use_wake_word(false);"

        - if:
            condition:
              # Check if the current state is "thinking"
              text_sensor.state:
                id: current_state
                state: "thinking"
            then:
              - logger.log: "Processing input..."
              - light.turn_on:
                  id: led
                  blue: 100%
                  red: 0%
                  green: 0%
                  effect: "Fast Pulse"

        - if:
            condition:
              # Check if the current state is "responding"
              text_sensor.state:
                id: current_state
                state: "responding"
            then:
              - logger.log: "Responding to input..."
              - light.turn_on:
                  id: led
                  blue: 100%
                  red: 0%
                  green: 0%
                  effect: none

        - if:
            condition:
              # Check if the current state is "error"
              text_sensor.state:
                id: current_state
                state: "error"
            then:
              - logger.log: "Handling error condition..."
              - light.turn_on:
                  id: led
                  blue: 0%
                  red: 100%
                  green: 0%
                  effect: "Fast Pulse"

switch:            
  - platform: template
    name: Continued conversation
    id: continued_conversation
    optimistic: true
    restore_mode: RESTORE_DEFAULT_OFF
    entity_category: config

external_components:
  - source: github://pr#5230
    components:
      - esp_adf
    refresh: 0s

esp_adf: